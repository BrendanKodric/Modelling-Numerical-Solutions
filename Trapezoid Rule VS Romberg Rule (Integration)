#include "pch.h"
#include <string>
#include <iostream>
#include <math.h>
#include <iomanip>

using namespace std;

double Trapazoid(double);
double Romberg(double);
double PI = 4.0*atan(1.0);
double function(double);

int main()
{
	double Integral_T, Integral_R, x, Error = 0.0001, Absolute_Error;
	
	cout << "\n f(x) = 2/(pi)^0.5* (integral 0 -> x) [e^(-t)^2] dx\n";
	cout << " __________________________________________________\n\n";
	cout << " What range would you like to calculate the integral of the function for?\n";
	cout << " 0 to ";
	cin >> x;
	cout << "\n\n TRAPAZOID RULE INTEGRATION\n" << " _____________________\n";

	Integral_T = Trapazoid(x);
	
	cout << " The integral of the function with range 0 to " << x << " is: " << Integral_T;

	cout << "\n\n ROMBERG RULE INTEGRATION\n" << " _____________________\n";

	Integral_R = Romberg(x);

	cout << "\n The integral of the function with range 0 to " << x << " is: " << Integral_R << endl;

	// Compare results as absolute error.
	if(Integral_T >= Integral_R)
	{
		Absolute_Error = Integral_T - Integral_R;
	}
	else 
	{
		Absolute_Error = Integral_R - Integral_T;
	}
	cout << "\n Absolute Error between the 2 methods is " << Absolute_Error << endl;

	return 0;
}

// Calculate function with x increment
double Trapazoid(double x)
{	
	double sum, a = 0, b = x;
	//h calculated using f''(t) = (e^(-t))'' -> |Error(10^-4)| <= |-1/12*h^2*f''(1)|
	double h = (sqrt(3 * exp(1))) / 100; 
	double n = (b - a) / h;
	sum = 0.5 * (function(0) + function(x));

	for (int i = 1; i < n-1; i++)
	{
		x = a + i * h;
		sum = sum + function(x);
	}
	cout << "\n\n Number of terms required for calculation = " << n << endl;

	sum = sum * h;

	return sum;
}

double Romberg(double x)
{
	double sum, h, a = 0, b = x;
	const int N = 5;
	int i, j, k;
	double R[N][N];
	
	h = (b - a); 
	
	R[0][0] = (h / 2)*(function(a) + function(b));
	cout << endl << setprecision(7) << R[0][0] << endl; //<-- Testing results

	for (i = 1; i < N; i++)
	{
		h = h / 2;
		sum = 0;
		for (k = 1; k < (pow(2, i) - 1); k = k + 2)
		{
			sum = sum + function(a + k * h);
		}
		R[i][0] = (0.5 * R[i - 1][0]) + (sum * h);
		cout << R[i][0] << "  "; //<-- Testing results
		for (j = 1; j <= i; j++)
		{
			R[i][j] = R[i][j - 1] + ((R[i][j - 1] - R[i - 1][j - 1]) / (pow(4, j) - 1));
			cout << "\t" << R[i][j] ; //<-- Testing results
		}
		cout << endl;
	}	
	double result = R[N - 1][N - 1];
	return result;
}


double function(double x)
{
	double f = exp(-(pow(x, 2)));
	return f;
}
